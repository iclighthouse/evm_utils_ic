type AccessList = record { storage_keys : vec vec nat8; address : vec nat8 };
type Item = variant {
  Num : nat64;
  Raw : vec nat8;
  Empty;
  List : List;
  Text : text;
};
type List = record { values : vec Item };
type Result = variant { Ok : record { vec nat8; vec nat8 }; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : Transaction; Err : text };
type Result_3 = variant { Ok : vec nat8; Err : text };
type Result_4 = variant { Ok : List; Err : text };
type Result_5 = variant { Ok : opt vec nat8; Err : text };
type Signature = record {
  r : vec nat8;
  s : vec nat8;
  v : nat64;
  from : opt vec nat8;
  hash : vec nat8;
};
type Transaction = variant {
  EIP1559 : Transaction1559;
  EIP2930 : Transaction2930;
  Legacy : TransactionLegacy;
};
type Transaction1559 = record {
  to : vec nat8;
  value : vec nat8;
  max_priority_fee_per_gas : vec nat8;
  data : vec nat8;
  sign : opt Signature;
  max_fee_per_gas : vec nat8;
  chain_id : nat64;
  nonce : vec nat8;
  gas_limit : vec nat8;
  access_list : vec AccessList;
};
type Transaction2930 = record {
  to : vec nat8;
  value : vec nat8;
  data : vec nat8;
  sign : opt Signature;
  chain_id : nat64;
  nonce : vec nat8;
  gas_limit : vec nat8;
  access_list : vec AccessList;
  gas_price : vec nat8;
};
type TransactionLegacy = record {
  to : vec nat8;
  value : vec nat8;
  data : vec nat8;
  sign : opt Signature;
  chain_id : nat64;
  nonce : vec nat8;
  gas_limit : vec nat8;
  gas_price : vec nat8;
};
service : {
  create_transaction : (Transaction) -> (Result) query;
  encode_signed_transaction : (Transaction) -> (Result) query;
  is_valid_public : (vec nat8) -> (Result_1) query;
  is_valid_signature : (vec nat8) -> (Result_1) query;
  keccak256 : (vec nat8) -> (vec nat8) query;
  parse_transaction : (vec nat8) -> (Result_2) query;
  pub_to_address : (vec nat8) -> (Result_3) query;
  recover_public_key : (vec nat8, vec nat8) -> (Result_3) query;
  rlp_decode : (vec nat8) -> (Result_4) query;
  rlp_encode : (List) -> (Result_3) query;
  verify_proof : (vec nat8, vec nat8, vec vec nat8) -> (Result_5) query;
}